services:
  web-app-dev:
    image: ghcr.io/digitalcomtech/web-app-dev:latest
    restart: always
    ports:
      - "${WEB_APP_LOCAL_PORT}:5173" # Maps Vite's development server port
    environment:
      - NODE_ENV=development # Sets the environment to development mode
      - VITE_SOCKET_URL=ws://10.22.0.30:8000 # Sets the environment to web socket

  live-server-dev:
    image: ghcr.io/digitalcomtech/koda:dev
    restart: always
    depends_on:
      - "redis-server"
    ports:
      - "${LIVE_SERVER_LOCAL_PORT}:8000" # Updated port for live server
    environment:
      - REDIS_HOST=redis-server
      - REDIS_PORT=6379
      - REDIS_CHANNEL=kafka_data
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -s http://localhost:8000/healthcheck | grep -q 'server ok' || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    command: ["python", "-m", "koda.domains.tracking.live.server.__main__", "--port", "8000", "--reload", "True", "--workers", "2"] 
  
  stream-consumer-dev:
    image: ghcr.io/digitalcomtech/koda:dev
    restart: always
    depends_on:
      - "redis-server"
      - "kafka"
    environment:
      - REDIS_HOST=redis-server
      - REDIS_PORT=6379
      - REDIS_CHANNEL=kafka_data
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC_TEST=test
      - KAFKA_API_VERSION=7.9.0
    healthcheck: 
      test: ["CMD", "sh", "-c", "/home/koda/koda/domains/tracking/live/stream_consumer/healthcheck.sh"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: ["watchfiles", "python -m koda.domains.tracking.live.stream_consumer.src.__main__"]

  digest-api-dev:
    image: ghcr.io/digitalcomtech/koda:dev
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "${DIGEST_API_LOCAL_PORT}:10200"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC_TEST=test
      - DIGEST_MESSAGE_MULTIPLIER=4
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -s http://localhost:10200/healthcheck | grep -q 'server ok' || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    command: ["python", "-m", "koda.domains.tracking.live.digest_api", "--port", "10200", "--reload", "True", "--workers", "2"]

  redis-server:
    image: redis:7.4.2-alpine
    restart: always
    hostname: redis-server
    container_name: redis-server
    ports:
      - "${REDIS_SERVER_LOCAL_PORT}:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 3s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.9.0
    hostname: kafka
    container_name: kafka
    restart: always
    ports:
      - "${KAFKA_BROKER_PORT}:9092" # External clients network
      - "9101:9101" # JMX port
    healthcheck:
      test: [ "CMD", "nc", "-z", "kafka", "29092" ]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:29092,PLAINTEXT_HOST://${KAFKA_BROKER_HOST}:${KAFKA_BROKER_PORT}"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: "${KAFKA_CLUSTER_ID}"

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.9.0
    hostname: control-center
    container_name: control-center
    restart: always
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "${KAFKA_CONTROL_CENTER_PORT}:9021"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9021" ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 120s
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092' # Connects to Kafka broker
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081 # Updated to connect to schema registry
      PORT: 9021

  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.0
    hostname: schema-registry
    container_name: schema-registry
    restart: always
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.9.0
    hostname: rest-proxy
    container_name: rest-proxy
    restart: always
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081
